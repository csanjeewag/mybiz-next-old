{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from './../layouts/MainLayout';\nimport Allcatagery from './../components/Allcatagery';\nimport NavBar from './../layouts/Navbar';\nimport TopSlide from '../components/Topslide';\nimport Footer from './../components/Footer';\nimport { Url } from './../constant/main';\nimport fetch from 'isomorphic-unfetch';\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Index).apply(this, arguments));\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(Footer, null));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nIndex.getInitialProps = function _callee(context) {\n  var id, res, types, error;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(Url, \"types\")));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          types = _context.sent;\n          error = false;\n\n          if (res.status != 200) {\n            error = true;\n          }\n\n          return _context.abrupt(\"return\", {\n            itemname: id,\n            types: types,\n            error: error\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["D:/Web-project/myapp/pages/index.js"],"names":["React","Component","Layout","Allcatagery","NavBar","TopSlide","Footer","Url","fetch","Index","getInitialProps","context","id","query","res","json","types","error","status","itemname"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;IACMC,K;;;;;;;;;;;6BAKO;AAGH,aACC,MAAC,MAAD,QAGN,MAAC,MAAD,OAHM,CADD;AAQH;;;;EAhBaR,S;;AAoBpBQ,KAAK,CAACC,eAAN,GAAwB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,EADY,GACLD,OAAO,CAACE,KADH,CACZD,EADY;AAAA;AAAA,2CAGFJ,KAAK,WAAID,GAAJ,WAHH;;AAAA;AAGdO,UAAAA,GAHc;AAAA;AAAA,2CAIDA,GAAG,CAACC,IAAJ,EAJC;;AAAA;AAIfC,UAAAA,KAJe;AAKhBC,UAAAA,KALgB,GAKR,KALQ;;AAMpB,cAAGH,GAAG,CAACI,MAAJ,IAAY,GAAf,EAAmB;AACfD,YAAAA,KAAK,GAAG,IAAR;AACJ;;AARoB,2CASb;AAACE,YAAAA,QAAQ,EAACP,EAAV;AAAaI,YAAAA,KAAK,EAALA,KAAb;AAAmBC,YAAAA,KAAK,EAALA;AAAnB,WATa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAcA,eAAeR,KAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from './../layouts/MainLayout';\r\nimport Allcatagery from './../components/Allcatagery';\r\nimport NavBar from './../layouts/Navbar';\r\nimport TopSlide from '../components/Topslide';\r\nimport Footer from './../components/Footer';\r\nimport {Url} from './../constant/main';\r\nimport fetch from 'isomorphic-unfetch';\r\nclass Index extends Component {\r\n\r\n\r\n\r\n    \r\n    render() { \r\n        \r\n\r\n          return ( \r\n           <Layout>\r\n\r\n\r\n     <Footer></Footer>\r\n  \r\n                  </Layout>\r\n           );\r\n      }\r\n    \r\n}\r\n\r\nIndex.getInitialProps = async function(context) {\r\n    const { id } = context.query;\r\n    \r\n    const res = await fetch(`${Url}types`);\r\n    var  types = await res.json();\r\n    var error = false;\r\n    if(res.status!=200){\r\n        error = true ;\r\n   }\r\n    return {itemname:id,types,error}\r\n\r\n\r\n  }\r\n\r\nexport default Index; \r\n"]},"metadata":{},"sourceType":"module"}